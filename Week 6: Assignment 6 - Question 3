#include <stdio.h>

int findPath(int matrix[100][100], int n, int x, int y, char* path, int pathIndex) {
    if (x < 0 || x >= n || y < 0 || y >= n || matrix[x][y] == 0) {
        return 0;  // Out of bounds or cell is 0
    }

    if (x == n - 1 && y == n - 1) {
        path[pathIndex] = '\0';  // Reached the end, terminate the path
        return 1;
    }

    // Mark the current cell as visited
    matrix[x][y] = 0;

    // Try all possible directions LRDU except the opposite of the last direction
    if (findPath(matrix, n, x, y + 1, path, pathIndex + 1)) {
        path[pathIndex] = 'R';
        return 1;
    }

    if (findPath(matrix, n, x, y - 1, path, pathIndex + 1)) {
        path[pathIndex] = 'L';
        return 1;
    }

    if (findPath(matrix, n, x + 1, y, path, pathIndex + 1)) {
        path[pathIndex] = 'D';
        return 1;
    }

    if (findPath(matrix, n, x - 1, y, path, pathIndex + 1)) {
        path[pathIndex] = 'U';
        return 1;
    }

    // Restore the cell to its original value (backtrack)
    matrix[x][y] = 1;

    return 0;
}

int main() {
    int n;
    scanf("%d", &n);
    int matrix[100][100];

    // Input matrix A
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    char path[2 * n];  // Maximum possible path length is 2*n (n-1 for each direction + '\0')
    findPath(matrix, n, 0, 0, path, 0);
    printf("%s", path);

    return 0;
}
